# Simplified Production Values for Flask E-commerce (Storage Issue Fix)
# This configuration avoids EBS storage issues by using emptyDir volumes

replicaCount: 2

image:
  repository: "REPLACE_WITH_ECR_URI"  # Will be replaced by deploy script
  pullPolicy: IfNotPresent
  tag: "latest"

# Service configuration for AWS
service:
  type: LoadBalancer
  port: 80
  targetPort: 5000
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

# Lightweight resource requirements
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Simple autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70

# Disable ingress for now
ingress:
  enabled: false

# DISABLE PERSISTENT STORAGE (fixes EBS CSI issues)
persistence:
  enabled: false

# DISABLE heavy dependencies to avoid timeout
postgresql:
  enabled: false

redis:
  enabled: false

# Use emptyDir volumes instead
volumes:
  - name: app-storage
    emptyDir: {}
  - name: temp-storage
    emptyDir: {}

volumeMounts:
  - name: app-storage
    mountPath: /app/data
  - name: temp-storage
    mountPath: /tmp

# Environment variables for production
env:
  - name: FLASK_ENV
    value: "production"
  - name: DATABASE_URL
    value: "sqlite:///app.db"  # Use SQLite instead of PostgreSQL
  - name: SECRET_KEY
    value: "your-secret-key-here"  # Will be overridden by deploy script

# Health checks
healthCheck:
  enabled: true
  readinessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  livenessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Security settings
podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false

# Relaxed affinity rules (to avoid scheduling conflicts)
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 50  # Reduced weight for less strict requirements
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - flask-ecommerce
        topologyKey: kubernetes.io/hostname

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: "flask-ecommerce"

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Labels and annotations
labels:
  environment: "production"
  app: "flask-ecommerce"
  
nodeSelector: {}
tolerations: []
