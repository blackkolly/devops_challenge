ðŸ”¥ Challenges
ðŸ”¹ Challenge 1: Create a workflow that runs on push to main and prints the date
ðŸ”¹ Challenge 2: Add a job that runs a shell script file (bash hello.sh)
ðŸ”¹ Challenge 3: Add an if: condition to run a step only on Linux
ðŸ”¹ Challenge 4: Store a secret (e.g., API_KEY) in GitHub and echo it in the workflow
ðŸ”¹ Challenge 5: Use the actions/checkout@v3 and print the current repo name

ðŸ”¹ Challenge 6: Set up a workflow to run unit tests in Node.js or Python (pytest)
ðŸ”¹ Challenge 7: Use the actions/upload-artifact action to upload test reports
ðŸ”¹ Challenge 8: Schedule a nightly build using the schedule trigger (CRON)
ðŸ”¹ Challenge 9: Add a matrix strategy to test across multiple Node or Python versions
ðŸ”¹ Challenge 10: Add a manual trigger with workflow_dispatch and input parameters


name: CI Challenges Workflow

on:
  push:
    branches: [ main ]

env:
  REPO_NAME: ${{ github.repository }}

jobs:
  print-date:
    name: Print current date
    runs-on: ubuntu-latest
    steps:
      - name: Print date
        run: echo "The current date is $(date)"

  run-script:
    name: Run shell script
    needs: print-date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Make script executable
        run: chmod +x hello.sh
      - name: Execute script
        run: ./hello.sh

  conditional-step:
    name: Conditional execution
    needs: run-script
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Linux-only step
        if: runner.os == 'Linux'
        run: echo "This step only runs on Linux!"
      - name: Non-Linux step
        if: runner.os != 'Linux'
        run: echo "This step runs on ${{ runner.os }}"

  secret-handling:
    name: Handle secret
    needs: conditional-step
    runs-on: ubuntu-latest
    steps:
      - name: Echo secret
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: echo "The API key is $API_KEY"

  repo-info:
    name: Print repo info
    needs: secret-handling
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Print repo name
        run: echo "The current repository is $REPO_NAME"

Explanation:

    Challenge 1: The print-date job runs on push to main and prints the current date.

    Challenge 2: The run-script job checks out the repo and executes a shell script hello.sh (make sure this file exists in your repo).

    Challenge 3: The conditional-step job runs on multiple OSes and has a step that only executes on Linux.

    Challenge 4: The secret-handling job accesses a secret named API_KEY stored in GitHub Secrets and echoes it.

    Challenge 5: The repo-info job uses actions/checkout@v3 and prints the repository name using the github.repository context.

name: Advanced CI/CD Workflow

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight UTC every day
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run-tests:
        description: 'Run full test suite?'
        required: false
        default: 'true'
        type: boolean

env:
  REPO_NAME: ${{ github.repository }}

jobs:
  # Original challenges 1-5
  print-date:
    name: Print current date
    runs-on: ubuntu-latest
    steps:
      - name: Print date
        run: echo "The current date is $(date)"

  run-script:
    name: Run shell script
    needs: print-date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Make script executable
        run: chmod +x hello.sh
      - name: Execute script
        run: ./hello.sh

  conditional-step:
    name: Conditional execution
    needs: run-script
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Linux-only step
        if: runner.os == 'Linux'
        run: echo "This step only runs on Linux!"
      - name: Non-Linux step
        if: runner.os != 'Linux'
        run: echo "This step runs on ${{ runner.os }}"

  secret-handling:
    name: Handle secret
    needs: conditional-step
    runs-on: ubuntu-latest
    steps:
      - name: Echo secret
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: echo "The API key is $API_KEY"

  repo-info:
    name: Print repo info
    needs: secret-handling
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Print repo name
        run: echo "The current repository is $REPO_NAME"

  # New challenges 6-10
  unit-tests:
    name: Run Unit Tests
    needs: repo-info
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        node-version: [14.x, 16.x, 18.x]
    steps:
      - uses: actions/checkout@v3
      
      # Python tests
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run Python tests
        run: pytest tests/ --junitxml=python-test-results-${{ matrix.python-version }}.xml
      
      # Node.js tests
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Node dependencies
        run: npm ci
      - name: Run Node tests
        run: npm test -- --reporters=junit --reporter-option="outputFile=node-test-results-${{ matrix.node-version }}.xml"
      
      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.node-version }}
          path: |
            *test-results-*.xml
      
      # Condition based on workflow_dispatch input
      - name: Extended tests
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.run-tests == 'true' }}
        run: echo "Running extended test suite..."

  deployment:
    name: Deployment
    needs: unit-tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Log deployment environment
        run: echo "Deploying to ${{ github.event.inputs.environment }}"
      - name: Fake deployment step
        run: echo "Pretending to deploy to ${{ github.event.inputs.environment }}..."

Explanation of New Challenges:

    Node.js/Python Unit Tests: The unit-tests job runs both Python (using pytest) and Node.js tests in parallel using a matrix strategy.

    Upload Artifacts: Test results in JUnit XML format are uploaded as artifacts using actions/upload-artifact@v3.

    Scheduled Build: The workflow triggers nightly at midnight UTC via the schedule event with cron syntax.

    Matrix Strategy: Tests run across multiple Python (3.8, 3.9, 3.10) and Node.js (14.x, 16.x, 18.x) versions.

    Manual Trigger: The workflow_dispatch event allows manual triggering with:

        Dropdown input for environment (staging/production)

        Boolean input to control whether to run extended tests
